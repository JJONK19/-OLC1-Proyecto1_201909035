package Analizador;
import java_cup.runtime.Symbol;
import Aplicacion.Errores;
import Aplicacion.Conjunto;
import Aplicacion.NodoT;
import Aplicacion.NodoA;
import Aplicacion.Siguiente;
import Aplicacion.Thompson;
import Aplicacion.Follows;
import Aplicacion.Arbol;
import Aplicacion.Estado;
import Aplicacion.Transicion;
import Aplicacion.Estados;
import Aplicacion.Validar;
import Aplicacion.Automata;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Arrays;
parser code {:

    
    public ArrayList<Errores> a = new ArrayList<>();        //Almacena los errores que vaya detectando el sistema
    public ArrayList<Conjunto> con = new ArrayList<>();     //Almacena los conjuntos que se vayan generando
    public ArrayList<Thompson> tom = new ArrayList<>();     //Almacena los thompson que lleva generando el sistema
    public ArrayList<Arbol> arb = new ArrayList<>();     //Almacena los arboles que lleva generando el sistema
    public ArrayList<Follows> fow = new ArrayList<>();     //Almacena los followa que lleva generando el sistema
    public ArrayList<String> car = new ArrayList<>();       //Lista de caracteres que va a manejar el conjunto
    public ArrayList<Estado> est = new ArrayList<>();
    public ArrayList<Estado> tab = new ArrayList<>();
    public ArrayList<Estados> trans = new ArrayList<>();    //Tabla de transiciones
    public ArrayList<Automata> auto = new ArrayList<>();    //Lista de automatas
    public ArrayList<Validar> val = new ArrayList<>();    //Lista de validaciones
    public int contador = 1;                                //Contabiliza cuantas hojas lleva el arbol
    public int cestado = 0;

    /*Method that is called when parser can be recovered*/
	public void syntax_error(Symbol s){
        System.out.println("Este es un error de sintaxis: "+s.value + ". Localizado en Fila " + (s.right+1) +" y Columna "+(s.left+1));
        Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
        a.add(crear);
    }

	/*Method that is called when parser can't be recovered*/
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Este es un error de sintaxis: "+s.value + ". Localizado en Fila "+ (s.right+1) +" y Columna "+(s.left+1) + ". No se pudo recuperar.");
        Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
        a.add(crear);

    }

:}

terminal String porcentaje, conjunto, concatenacion, or, kleene, positiva, cerouno, guion, cierre, apertura, coma, dospuntos, puntocoma;
terminal String cadena, digito, letra, simbolo, flecha, id, especial;

non terminal SO, CONTENIDO, DECLARACION, VALIDAR, CONJUNTO, EXPRESION;
non terminal ArrayList<Object> OTROS, E;
non terminal String BINARIO, UNARIO, NOT, GRUPO, VAL, SYM;


start with SO;

/*--------------- Manejo de Declaraciones -----------------------*/
SO ::= apertura CONTENIDO cierre
       | error
       {:
            Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
            a.add(crear);
        :}
;

CONTENIDO ::= DECLARACION porcentaje porcentaje porcentaje porcentaje VALIDAR
            | error
            {:
                Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
                a.add(crear);
            :}
;

DECLARACION ::= CONJUNTO DECLARACION
                |EXPRESION DECLARACION
                |CONJUNTO
                |EXPRESION
                | error
                {:
                     Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
                     a.add(crear);
                 :}
;

/*--------------- Manejo de Conjuntos -----------------------*/

CONJUNTO ::= conjunto dospuntos id:a flecha NOT:b puntocoma
            {:
                ArrayList<String> ncar = new ArrayList<>();
                for(int i = 0; i < car.size(); i++){
                    ncar.add(car.get(i));
                }
                Conjunto nuevo = new Conjunto(a, ncar, b);
                con.add(nuevo);
                car.clear();
            :}
            | error
            {:
                Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
                a.add(crear);
            :}
;

NOT ::= letra:a guion letra:b
        {:
            int min = a.toCharArray()[0];
            int max = b.toCharArray()[0];
            if(min > max){
                int ntem = min;
                min = max;
                max = ntem;
            }
            for(int i=min;i<=max;i++){
                car.add(Character.toString(i));
            }
            String temp = "[" + a + "-" + b +"]";            
            RESULT = temp;
        :}

        |digito:a guion digito:b
        {:
            int min = a.toCharArray()[0];
            int max = b.toCharArray()[0];
            if(min > max){
                int ntem = min;
                min = max;
                max = ntem;
            }
            for(int i=min;i<=max;i++){
                car.add(Character.toString(i));
            }
            String temp = "[" + a + "-" + b +"]";            
            RESULT = temp;
        :}

        |SYM:a guion SYM:b
        {:
            int min = a.toCharArray()[0];
            int max = b.toCharArray()[0];
            if(min > max){
                int ntem = min;
                min = max;
                max = ntem;
            }
            for(int i=min;i<=max;i++){
                car.add(Character.toString(i));
            }
            String temp = "[" + a + "-" + b +"]";            
            RESULT = temp;
        :}

        |GRUPO:a
        {:
            String temp = "(" + a + ")";   
            Collections.reverse(car);
            RESULT = temp;
        :}
        | error
       {:
            Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
            a.add(crear);
        :}
;

VAL ::= letra:a             {: RESULT = a; :}
        |digito:a           {: RESULT = a; :}
        |SYM:a              {: RESULT = a; :}
        | error
       {:
            Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
            a.add(crear);
        :}
;

SYM ::= simbolo:a               {: RESULT = a; :}
        |porcentaje:a           {: RESULT = a; :}
        |concatenacion:a        {: RESULT = a; :}
        |or:a                   {: RESULT = a; :}
        |kleene:a               {: RESULT = a; :}
        |positiva:a             {: RESULT = a; :}
        |cerouno:a              {: RESULT = a; :}
        | error
       {:
            Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
            a.add(crear);
        :}
;

GRUPO ::= VAL:a coma GRUPO:b
          {:
            String not = a + "|" + b;
            car.add(a);
            RESULT = not;
          :}


          |VAL:a
          {:
            car.add(a);
            RESULT = a;
          :}
          | error
        {:
            Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
            a.add(crear);
        :}
;

/*--------------- Manejo de Expresiones -----------------------*/
EXPRESION ::= id:a flecha E:b puntocoma
         {:
            //Procedimiento del metodo Thompson
            NodoT Cabecera1 = (NodoT)b.get(0);
            NodoT Salida1 = (NodoT)b.get(1);
            ArrayList<NodoT> a1 = (ArrayList<NodoT>)b.get(2);
            Thompson nuevo = new Thompson(a, a1, Cabecera1);
            tom.add(nuevo);
            
            //Procedimiento del metodo del arbol
            NodoA hijo1 = (NodoA)b.get(3);
            ArrayList<Siguiente> s1 = (ArrayList<Siguiente>)b.get(4);
            ArrayList<NodoA> n1 = (ArrayList<NodoA>)b.get(5);
            
                //Creacion del nodo aceptacion
            NodoA a11 = new NodoA();
            a11.simbolo = "$";
            a11.valor = "$";
            a11.anulable = false;
            a11.nombre = Integer.toString(contador);
            contador++;
            a11.tipo = "Hijo";
            a11.first.add(a11.nombre);
            a11.last.add(a11.nombre);

            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(a11);
            
            NodoA hijo2 = a11;
            ArrayList<Siguiente> s2 = new ArrayList<>();
            ArrayList<NodoA> n2 = listaNombre;
            
                //Nodo Binario
            NodoA bin = new NodoA();
            bin.valor = ".";
            bin.simbolo = ".";
            if(hijo1.anulable == true && hijo2.anulable == true){
                bin.anulable = true;
            }else{
                bin.anulable = false; 
            }
            bin.tipo = "Padre";
            bin.hijo1 = hijo1;
            bin.hijo2 = hijo2;
            
            //Calculo de los first
            if(hijo1.anulable == true){
                for(int i = 0; i < hijo1.first.size(); i++){
                    bin.first.add(hijo1.first.get(i));
                }
                
                for(int i = 0; i < hijo2.first.size(); i++){
                    bin.first.add(hijo2.first.get(i));
                }
            }else{
                for(int i = 0; i < hijo1.first.size(); i++){
                    bin.first.add(hijo1.first.get(i));
                }
            }

            //Calculo de last
            if(hijo2.anulable == true){
                for(int i = 0; i < hijo1.last.size(); i++){
                    bin.last.add(hijo1.last.get(i));
                }
                
                for(int i = 0; i < hijo2.last.size(); i++){
                    bin.last.add(hijo2.last.get(i));
                }
            }else{
                for(int i = 0; i < hijo2.last.size(); i++){
                    bin.last.add(hijo2.last.get(i));
                }
            }
            
            //Mezcla de Siguientes
            ArrayList<Siguiente> sis = new ArrayList<>();
            for(int i = 0; i < s1.size(); i++){
                sis.add(s1.get(i));
            }
            for(int i = 0; i < s2.size(); i++){
                sis.add(s2.get(i));
            }
            
            //Calculo de Siguientes
            ArrayList<String> ast = hijo2.first;
            for(int i = 0; i < hijo1.last.size(); i++){
                String st = hijo1.last.get(i);
                for(int j = 0; j < sis.size(); j++){
                    Siguiente ste = sis.get(j);
                    if(ste.hoja == st){
                        if(ast.size() == 0){
                            for(int k = 0; k < ast.size(); k++){
                                ste.LS.add(ast.get(k));
                            }
                        }else{
                            for(int k = 0; k < ast.size(); k++){
                                if(Arrays.asList(ste.LS).contains(ast.get(k)) == false){
                                ste.LS.add(ast.get(k));
                                }
                            }
                        }
                        break;
                    }
                }
            }
            ArrayList<NodoA>listanombre = new ArrayList<>();
            listanombre.add(bin);
            for(int i = 0; i < n1.size(); i++){
                listanombre.add(n1.get(i));
            }
            for(int i = 0; i < n2.size(); i++){
                listanombre.add(n2.get(i));
            }
            
            NodoA cabecera = bin;
            String nomo = hijo2.nombre;
            contador = 1;

            //Crear objeto arbol
            Arbol nuevoa = new Arbol(a, listanombre, cabecera);
            arb.add(nuevoa);
            
            //Crear objeto tabla siguientes
            Follows nuevof = new Follows(a, sis);
            fow.add(nuevof);
            
            //Manejo de la tabla de transiciones
            Estado inicial = new Estado();
            inicial.nombre = "S" + Integer.toString(cestado);
            cestado++;
            inicial.sig = cabecera.first;
            
            est.add(inicial);
            while(!est.isEmpty()){
                Estado etemp = est.get(0);
                ArrayList<Transicion> ttemp = new ArrayList<>();
                ArrayList<String> stemp = etemp.sig;
                //1.Recorrer stemp
                for(int i = 0; i < stemp.size(); i++){
                    String st = stemp.get(i);
                    for(int j = 0; j < sis.size(); j++){
                        Siguiente ste = sis.get(j);
                        if(ste.hoja == st){
                            Transicion tt = new Transicion();
                            tt.car = ste.terminal;
                            tt.sig = ste.LS;
                            ttemp.add(tt);
                        }
                    }
                    if(st == nomo){
                        etemp.aceptar = true;
                    }
                }
                
                //2.Optimización
                for(int i = 0 ; i < ttemp.size(); i++){
                    Transicion tte = ttemp.get(i);
                    for(int j = 0 ; j < ttemp.size(); j++){
                        if(i != j){
                            Transicion ttej = ttemp.get(j);
                            if(!ttej.rev){
                                if(tte.car.equals(ttej.car)){
                                    for(int k = 0; k < ttej.car.size(); k++){
                                        tte.car.add(ttej.car.get(k));
                                    }
                                    ttej.borrar = true;
                                }
                                tte.rev = true;
                            }
                        }
                       
                    }
                    
                }
                
                for(int i = 0 ; i < ttemp.size(); i++){
                    Transicion tte = ttemp.get(i);
                    if(tte.borrar){
                        tte = null;
                        ttemp.remove(i);
                    }
                }
                   
                //Nombres
                for(int i = 0 ; i < ttemp.size(); i++){
                    int ban = 0;
                    int bant = 0;
                    Transicion tte = ttemp.get(i);
                    //Buscar en la cola de estados
                    for(int j = 0; j < est.size(); j++){
                        ArrayList<String> lse = est.get(j).sig;
                        if(lse.equals(tte.sig)){
                            tte.next = est.get(j);
                            ban = 1;
                            break;
                        }
                    }
                    
                    //Buscar en los estados finalizados
                    if(ban == 0){
                        if(tab.isEmpty()){
                            //Crear nuevo estado
                            Estado net = new Estado();
                            net.nombre = "S" + Integer.toString(cestado);
                            cestado++;
                            net.sig = tte.sig;
                            tte.next = net;
                            est.add(net);
                            
                        }else{
                            for(int j = 0; j < tab.size(); j++){
                                ArrayList<String> lse = tab.get(j).sig;
                                if(lse.equals(tte.sig)){
                                    tte.next = tab.get(j);
                                    bant = 1;
                                    break;
                                }
                            }
                            
                            if(bant == 0){
                                //Crear nuevo estado
                                Estado net = new Estado();
                                net.nombre = "S" + Integer.toString(cestado);
                                cestado++;
                                net.sig = tte.sig;
                                tte.next = net;
                                est.add(net);
                            }
                        }
                    }
                    
                }
                
                //Paso Final
                etemp.tr = ttemp;
                tab.add(etemp);
                est.remove(0);
            }
            
            cestado = 0;
            Estados ntrans = new Estados(a,tab);
            trans.add(ntrans);

             //Manejo de Automatas
            Automata nauto = new Automata(a,tab, inicial);
            auto.add(nauto);

            est = new ArrayList<>();
            tab = new ArrayList<>();

           
         :}
         | error
        {:
             Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
             a.add(crear);
         :}
;

E ::= BINARIO:a E:b E:c
      {:
        if(a.equals(".")){                                           //Concatenación
            ArrayList<Object> temp = new ArrayList<>();
        //Procedimiento para el método Thompson
            NodoT Cabecera1 = (NodoT)b.get(0);
            NodoT Salida1 = (NodoT)b.get(1);
            ArrayList<NodoT> a1 = (ArrayList<NodoT>)b.get(2);

            NodoT Cabecera2 = (NodoT)c.get(0);
            NodoT Salida2 = (NodoT)c.get(1);
            ArrayList<NodoT> a2 = (ArrayList<NodoT>)c.get(2);
            
            //Procedimiento
            //1.Convertir salida en nueva entrada
            if(Cabecera2.next1 != null){
                Salida1.next1 = Cabecera2.next1;
                Salida1.tran1 = Cabecera2.tran1;
            }
            
            if(Cabecera2.next2 != null){
                Salida1.next2 = Cabecera2.next2;
                Salida1.tran2 = Cabecera2.tran2;
            }
            
            //2. Borrar nodo reemplazado
            a2.remove(0);
            Cabecera2 = null;
            
            //3. Preparar Info
            NodoT Cabecera = Cabecera1;
            NodoT Salida = Salida2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            for(int i = 0; i < a1.size(); i++){
                ListaNombre.add(a1.get(i));
            }
            for(int i = 0; i < a2.size(); i++){
                ListaNombre.add(a2.get(i));
            }
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);

            //Procedimiento para metodo del arbol
            NodoA hijo1 = (NodoA)b.get(3);
            NodoA hijo2 = (NodoA)c.get(3);
            ArrayList<Siguiente> s1 = (ArrayList<Siguiente>)b.get(4);
            ArrayList<Siguiente> s2 = (ArrayList<Siguiente>)c.get(4);
            ArrayList<NodoA> n1 = (ArrayList<NodoA>)b.get(5);
            ArrayList<NodoA> n2 = (ArrayList<NodoA>)c.get(5);
                //Nodo Binario
            NodoA bin = new NodoA();
            bin.simbolo = ".";
            bin.valor = ".";
            if(hijo1.anulable == true && hijo2.anulable == true){
                bin.anulable = true;
            }else{
                bin.anulable = false; 
            }
            bin.tipo = "Padre";
            bin.hijo1 = hijo1;
            bin.hijo2 = hijo2;
            
            //Calculo de los first
            if(hijo1.anulable == true){
                for(int i = 0; i < hijo1.first.size(); i++){
                    bin.first.add(hijo1.first.get(i));
                }
                
                for(int i = 0; i < hijo2.first.size(); i++){
                    bin.first.add(hijo2.first.get(i));
                }
            }else{
                for(int i = 0; i < hijo1.first.size(); i++){
                    bin.first.add(hijo1.first.get(i));
                }
            }

            //Calculo de last
            if(hijo2.anulable == true){
                for(int i = 0; i < hijo1.last.size(); i++){
                    bin.last.add(hijo1.last.get(i));
                }
                
                for(int i = 0; i < hijo2.last.size(); i++){
                    bin.last.add(hijo2.last.get(i));
                }
            }else{
                for(int i = 0; i < hijo2.last.size(); i++){
                    bin.last.add(hijo2.last.get(i));
                }
            }
            
            //Mezcla de Siguientes
            ArrayList<Siguiente> sis = new ArrayList<>();
            for(int i = 0; i < s1.size(); i++){
                sis.add(s1.get(i));
            }
            for(int i = 0; i < s2.size(); i++){
                sis.add(s2.get(i));
            }
            
            //Calculo de Siguientes
            ArrayList<String> ast = hijo2.first;
            for(int i = 0; i < hijo1.last.size(); i++){
                String st = hijo1.last.get(i);
                for(int j = 0; j < sis.size(); j++){
                    Siguiente ste = sis.get(j);
                    if(ste.hoja == st){
                        if(ste.LS.size() == 0){
                            for(int k = 0; k < ast.size(); k++){
                                ste.LS.add(ast.get(k));
                            }
                        }else{
                            for(int k = 0; k < ast.size(); k++){
                                if(!ste.LS.contains(ast.get(k))){
                                    ste.LS.add(ast.get(k));
                                }
                            }
                        }
                        break;
                    }
                }
            }
            temp.add(bin);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(bin);
            for(int i = 0; i < n1.size(); i++){
                listaNombre.add(n1.get(i));
            }
            for(int i = 0; i < n2.size(); i++){
                listaNombre.add(n2.get(i));
            }
            temp.add(listaNombre);
            RESULT = temp;
            
        }else{                                                      //Or
            ArrayList<Object> temp = new ArrayList<>();
        //Procedimiento para el método Thompson
            NodoT Cabecera1 = (NodoT)b.get(0);
            NodoT Salida1 = (NodoT)b.get(1);
            ArrayList<NodoT> a1 = (ArrayList<NodoT>)b.get(2);

            NodoT Cabecera2 = (NodoT)c.get(0);
            NodoT Salida2 = (NodoT)c.get(1);
            ArrayList<NodoT> a2 = (ArrayList<NodoT>)c.get(2);
            
            //Procedimiento
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = Cabecera1;
            t1.tran1 = "\"" + "*E*" + "\"";
            t1.next2 = Cabecera2;
            t1.tran2 = "\"" + "*E*" + "\"";

            Salida1.next1 = t2;
            Salida1.tran1 = "\"" + "*E*" + "\"";
            Salida2.next2 = t2;
            Salida2.tran2 = "\"" + "*E*" + "\"";
            
            //Preparar Info
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(Cabecera);
            for(int i = 0; i < a1.size(); i++){
                ListaNombre.add(a1.get(i));
            }
            for(int i = 0; i < a2.size(); i++){
                ListaNombre.add(a2.get(i));
            }
            ListaNombre.add(Salida);
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);

            //Procedimiento para metodo del arbol
            NodoA hijo1 = (NodoA)b.get(3);
            NodoA hijo2 = (NodoA)c.get(3);
            ArrayList<Siguiente> s1 = (ArrayList<Siguiente>)b.get(4);
            ArrayList<Siguiente> s2 = (ArrayList<Siguiente>)c.get(4);
            ArrayList<NodoA> n1 = (ArrayList<NodoA>)b.get(5);
            ArrayList<NodoA> n2 = (ArrayList<NodoA>)c.get(5);

                //Nodo Binario
            NodoA bin = new NodoA();
            bin.simbolo = "\\|";
            bin.valor = "|";
            if(hijo1.anulable == true || hijo2.anulable == true){
                bin.anulable = true;
            }else{
                bin.anulable = false; 
            }
            bin.tipo = "Padre";
            bin.hijo1 = hijo1;
            bin.hijo2 = hijo2;
            
            //Calculo de los first
            for(int i = 0; i < hijo1.first.size(); i++){
                bin.first.add(hijo1.first.get(i));
            }
                
            for(int i = 0; i < hijo2.first.size(); i++){
                bin.first.add(hijo2.first.get(i));
            }
            

            //Calculo de last
            for(int i = 0; i < hijo1.last.size(); i++){
                bin.last.add(hijo1.last.get(i));
            }
                
            for(int i = 0; i < hijo2.last.size(); i++){
                bin.last.add(hijo2.last.get(i));
            }
            
            //Mezcla de Siguientes
            ArrayList<Siguiente> sis = new ArrayList<>();
            for(int i = 0; i < s1.size(); i++){
                sis.add(s1.get(i));
            }
            for(int i = 0; i < s2.size(); i++){
                sis.add(s2.get(i));
            }
            temp.add(bin);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(bin);
            for(int i = 0; i < n1.size(); i++){
                listaNombre.add(n1.get(i));
            }
            for(int i = 0; i < n2.size(); i++){
                listaNombre.add(n2.get(i));
            }
            temp.add(listaNombre);
            RESULT = temp;
        }
      :}

      |UNARIO:a E:b
      {:
        if(a.equals("*")){                                           //Kleene
            ArrayList<Object> temp = new ArrayList<>();
        //Procedimiento para el método Thompson
            NodoT Cabecera1 = (NodoT)b.get(0);
            NodoT Salida1 = (NodoT)b.get(1);
            ArrayList<NodoT> a1 = (ArrayList<NodoT>)b.get(2);

            //Procedimiento
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = Cabecera1;
            t1.tran1 = "\"" + "*E*" + "\"";
            t1.next2 = t2;
            t1.tran2 = "\"" + "*E*" + "\"";
            t1.constraint = true;

            Salida1.next1 = t2;
            Salida1.tran1 = "\"" + "*E*" + "\"";
            Salida1.next2 = Cabecera1;
            Salida1.tran2 = "\"" + "*E*" + "\"";
            
            //Preparar Info
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(Cabecera);
            for(int i = 0; i < a1.size(); i++){
                ListaNombre.add(a1.get(i));
            }
            ListaNombre.add(Salida);
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);

            //Procedimiento para metodo del arbol
            NodoA hijo1 = (NodoA)b.get(3);
            ArrayList<Siguiente> s1 = (ArrayList<Siguiente>)b.get(4);
            ArrayList<NodoA> n1 = (ArrayList<NodoA>)b.get(5);
                //Nodo Unario
            NodoA bin = new NodoA();
            bin.valor = "*";
            bin.simbolo = "*";
            bin.anulable = true;
            bin.tipo = "Padre";
            bin.hijo1 = hijo1;
            
            //Calculo de los first
            for(int i = 0; i < hijo1.first.size(); i++){
                bin.first.add(hijo1.first.get(i));
            }
            

            //Calculo de last
            for(int i = 0; i < hijo1.last.size(); i++){
                bin.last.add(hijo1.last.get(i));
            }
            
            //Mezcla de Siguientes
            ArrayList<Siguiente> sis = new ArrayList<>();
            for(int i = 0; i < s1.size(); i++){
                sis.add(s1.get(i));
            }
            
            //Calculo de Siguientes
            ArrayList<String> ast = hijo1.first;
            for(int i = 0; i < hijo1.last.size(); i++){
                String st = hijo1.last.get(i);
                for(int j = 0; j < sis.size(); j++){
                    Siguiente ste = sis.get(j);
                    if(ste.hoja == st){
                        if(ste.LS.size() == 0){
                            for(int k = 0; k < ast.size(); k++){
                                ste.LS.add(ast.get(k));
                            }
                        }else{
                            for(int k = 0; k < ast.size(); k++){
                                if(!ste.LS.contains(ast.get(k))){
                                    ste.LS.add(ast.get(k));
                                }
                            }
                        }
                        break;
                    }
                }
            }
            temp.add(bin);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(bin);
            for(int i = 0; i < n1.size(); i++){
               listaNombre.add(n1.get(i));
            }
            temp.add(listaNombre);
            RESULT = temp;
            
        }else{
            if(a.equals("+")){                                           //Positiva
                ArrayList<Object> temp = new ArrayList<>();
            //Procedimiento para el método Thompson
                NodoT Cabecera1 = (NodoT)b.get(0);
                NodoT Salida1 = (NodoT)b.get(1);
                ArrayList<NodoT> a1 = (ArrayList<NodoT>)b.get(2);

                //Procedimiento
                //1. Clonar entrada
                ArrayList<String> ctran = new ArrayList<>();
                ArrayList<NodoT> clon = new ArrayList<>();

                for(int i = 0; i < a1.size(); i++){
                    //Renombrar nodos
                    NodoT rlis = a1.get(i);
                    rlis.Nombre = Character.toString(41 + i);
                }

                for(int i = 0; i < a1.size(); i++){
                    //Creacion de Nodos
                    NodoT tclon = new NodoT();
                    tclon.Nombre = Character.toString(41 + i); 
                    clon.add(tclon);
                    
                    //Adicion de Trancisiones a la lista de strings
                    NodoT rlis = a1.get(i);
                    
                    if(rlis.next1 != null){
                        ctran.add(Character.toString(41 + i));
                        ctran.add(rlis.next1.Nombre);
                        ctran.add(rlis.tran1);
                    }

                    if(rlis.next2 != null){
                        ctran.add(Character.toString(41 + i));
                        ctran.add(rlis.next2.Nombre);
                        ctran.add(rlis.tran2);
                    }
                }
                
                for(int i = 0; i < (ctran.size()/3); i++){
                    String A = ctran.get(i*3);
                    String B = ctran.get((i*3)+1);
                    String C = ctran.get((i*3)+2);
                    
                    NodoT A1 = new NodoT();
                    for(int j = 0; j < clon.size(); j++){
                        A1 = clon.get(j);
                        if(A1.Nombre.equals(A)){
                            break;
                        }
                    }
                    
                    NodoT B1 = new NodoT();
                    for(int j = 0; j < clon.size(); j++){
                        B1 = clon.get(j);
                        if(B1.Nombre.equals(B)){
                            break;
                        }
                    }
                    
                    if(A1.next1 == null){
                        A1.next1 = B1;
                        A1.tran1 = C;
                    }else{
                        A1.next2 = B1;
                        A1.tran2 = C;
                    }
                }
                
                NodoT Cabecera2 = clon.get(0);
                NodoT Salida2 = clon.get(clon.size()-1);
                ArrayList<NodoT> a2 = clon;
                
                //2.Kleene
                NodoT t1 = new NodoT();
                NodoT t2 = new NodoT();
                t1.next1 = Cabecera2;
                t1.tran1 = "\"" + "*E*" + "\"";
                t1.next2 = t2;
                t1.tran2 = "\"" + "*E*" + "\"";

                Salida2.next1 = t2;
                Salida2.tran1 = "\"" + "*E*" + "\"";
                Salida2.next2 = Cabecera2;
                Salida2.tran2 = "\"" + "*E*" + "\"";
                
                NodoT CabeceraClon = t1;
                NodoT SalidaClon = t2;
                ArrayList<NodoT>ListaNombreClon = new ArrayList<>();
                ListaNombreClon.add(CabeceraClon);
                for(int i = 0; i < clon.size(); i++){
                    ListaNombreClon.add(clon.get(i));
                }
                ListaNombreClon.add(SalidaClon);
                
                //3. Concatenación
                if(CabeceraClon.next1 != null){
                    Salida1.next1 = CabeceraClon.next1;
                    Salida1.tran1 = CabeceraClon.tran1;
                }

                if(CabeceraClon.next2 != null){
                    Salida1.next2 = CabeceraClon.next2;
                    Salida1.tran2 = CabeceraClon.tran2;
                }

                //Borrar nodo reemplazado
                ListaNombreClon.remove(0);
                CabeceraClon = null;


                //3. Preparar Info
                NodoT Cabecera = Cabecera1;
                NodoT Salida = SalidaClon;
                ArrayList<NodoT>ListaNombre = new ArrayList<>();
                for(int i = 0; i < a1.size(); i++){
                    ListaNombre.add(a1.get(i));
                }
                for(int i = 0; i < ListaNombreClon.size(); i++){
                    ListaNombre.add(ListaNombreClon.get(i));
                }
                temp.add(Cabecera);
                temp.add(Salida);
                temp.add(ListaNombre);

                //Procedimiento para metodo del arbol
                NodoA hijo1 = (NodoA)b.get(3);
                ArrayList<Siguiente> s1 = (ArrayList<Siguiente>)b.get(4);
                ArrayList<NodoA> n1 = (ArrayList<NodoA>)b.get(5);
                
                    //Nodo Unario
                NodoA bin = new NodoA();
                bin.simbolo = "+";
                bin.valor = "+";
                bin.anulable = hijo1.anulable;
                bin.tipo = "Padre";
                bin.hijo1 = hijo1;
                //Calculo de los first
                for(int i = 0; i < hijo1.first.size(); i++){
                    bin.first.add(hijo1.first.get(i));
                }


                //Calculo de last
                for(int i = 0; i < hijo1.last.size(); i++){
                    bin.last.add(hijo1.last.get(i));
                }

                //Mezcla de Siguientes
                ArrayList<Siguiente> sis = new ArrayList<>();
                for(int i = 0; i < s1.size(); i++){
                    sis.add(s1.get(i));
                }

                //Calculo de Siguientes
                ArrayList<String> ast = hijo1.first;
                for(int i = 0; i < hijo1.last.size(); i++){
                String st = hijo1.last.get(i);
                for(int j = 0; j < sis.size(); j++){
                    Siguiente ste = sis.get(j);
                    if(ste.hoja == st){
                        if(ste.LS.size() == 0){
                            for(int k = 0; k < ast.size(); k++){
                                ste.LS.add(ast.get(k));
                            }
                        }else{
                            for(int k = 0; k < ast.size(); k++){
                                if(!ste.LS.contains(ast.get(k))){
                                    ste.LS.add(ast.get(k));
                                }
                            }
                        }
                        break;
                    }
                }
            }
                temp.add(bin);   
                temp.add(sis);
                ArrayList<NodoA>listaNombre = new ArrayList<>();
                listaNombre.add(bin);
                for(int i = 0; i < n1.size(); i++){
                    listaNombre.add(n1.get(i));
                }
                temp.add(listaNombre);
                RESULT = temp;
            
            }else{                                         //Uno o Cero
                ArrayList<Object> temp = new ArrayList<>();
            //Procedimiento para el método Thompson
                NodoT Cabecera1 = (NodoT)b.get(0);
                NodoT Salida1 = (NodoT)b.get(1);
                ArrayList<NodoT> a1 = (ArrayList<NodoT>)b.get(2);

                //Procedimiento
                NodoT t1 = new NodoT();
                NodoT t2 = new NodoT();
                NodoT te = new NodoT();
                NodoT ts = new NodoT();
                te.next1 = Cabecera1;
                te.tran1 = "\"" + "*E*" + "\"";
                te.next2 = t1;
                te.tran2 = "\"" + "*E*" + "\"";

                t1.next1 = t2;
                t1.tran2 = "\"" + "*E*" + "\"";
                t2.next1 = ts;
                t2.tran1 = "\"" + "*E*" + "\"";
                Salida1.next2 = ts;
                Salida1.tran2 = "\"" + "*E*" + "\"";

                //Preparar Info
                NodoT Cabecera = te;
                NodoT Salida = ts;
                ArrayList<NodoT>ListaNombre = new ArrayList<>();
                ListaNombre.add(Cabecera);
                for(int i = 0; i < a1.size(); i++){
                    ListaNombre.add(a1.get(i));
                }
                ListaNombre.add(t1);
                ListaNombre.add(t2);
                ListaNombre.add(Salida);
                temp.add(Cabecera);
                temp.add(Salida);
                temp.add(ListaNombre);

                //Procedimiento para metodo del arbol
                NodoA hijo1 = (NodoA)b.get(3);
                ArrayList<Siguiente> s1 = (ArrayList<Siguiente>)b.get(4);
                ArrayList<NodoA> n1 = (ArrayList<NodoA>)b.get(5);
                    //Nodo Unario
                NodoA bin = new NodoA();
                bin.valor = "?";
                bin.simbolo = "?";
                bin.anulable = true;
                bin.tipo = "Padre";
                bin.hijo1 = hijo1;
                //Calculo de los first
                for(int i = 0; i < hijo1.first.size(); i++){
                    bin.first.add(hijo1.first.get(i));
                }


                //Calculo de last
                for(int i = 0; i < hijo1.last.size(); i++){
                    bin.last.add(hijo1.last.get(i));
                }

                //Mezcla de Siguientes
                ArrayList<Siguiente> sis = new ArrayList<>();
                for(int i = 0; i < s1.size(); i++){
                    sis.add(s1.get(i));
                }
                temp.add(bin);   
                temp.add(sis);
                ArrayList<NodoA>listaNombre = new ArrayList<>();
                listaNombre.add(bin);
                for(int i = 0; i < n1.size(); i++){
                    listaNombre.add(n1.get(i));
                }
                temp.add(listaNombre);
                RESULT = temp;
            }
        }
      :}

      |apertura id:a cierre
      {:
        Conjunto ct = null;
        int ban = 0;
        for(int i = 0; i < con.size(); i++){
            ct = con.get(i);
            if(ct.ID.equals(a)){
                ban = 1;
                break;
            }
        }
        
        if(ban == 1){
            //Procedimiento para el método Thompson
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = t2;
            t1.tran1 = "\"" +ct.ID + "\"";
            
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(t1);
            ListaNombre.add(t2);
            ArrayList<Object> temp = new ArrayList<>();
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);
            
            //Procedimiento para el metodo del arbol
            NodoA a1 = new NodoA();
            a1.simbolo = ct.ID;
            a1.simbolo = a1.simbolo.replace("{", "");
            a1.simbolo = a1.simbolo.replace("}", "");

            a1.valor = ct.notacion;
            a1.anulable = false;
            a1.nombre = Integer.toString(contador);
            contador++;
            a1.tipo = "Hijo";
            a1.first.add(a1.nombre);
            a1.last.add(a1.nombre);

            Siguiente n = new Siguiente();
            n.terminal = ct.conjunto;;
            n.hoja = a1.nombre;
            n.simbolo = ct.ID;
            n.simbolo = n.simbolo.replace("{", "");
            n.simbolo = n.simbolo.replace("}", "");

            ArrayList<Siguiente> sis = new ArrayList<>();
            sis.add(n);
            temp.add(a1);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(a1);
            temp.add(listaNombre);
            RESULT = temp;
        }else{
            //Procedimiento para el método Thompson
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = t2;
            t1.tran1 = "\""+ "Error" + "\"";
            
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(t1);
            ListaNombre.add(t2);
            ArrayList<Object> temp = new ArrayList<>();
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);
            
            //Procedimiento para el metodo del arbol
            NodoA a1 = new NodoA();
            a1.simbolo = "\""+ "Error" + "\"";
            a1.valor = "Error";
            a1.anulable = false;
            a1.nombre = Integer.toString(contador);
            contador++;
            a1.tipo = "Hijo";
            a1.first.add(a1.nombre);
            a1.last.add(a1.nombre);

            Siguiente n = new Siguiente();
            n.terminal.add(a);
            n.hoja = a1.nombre;

            ArrayList<Siguiente> sis = new ArrayList<>();
            sis.add(n);
            temp.add(a1);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(a1);
            temp.add(listaNombre);
            RESULT = temp;
        }
      :}
      |OTROS:a               {: RESULT = a; :}
      | error
       {:
            Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
            a.add(crear);
        :}
;

OTROS ::= cadena:a
          {:
            //Procedimiento para el método Thompson
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = t2;
            t1.tran1 =  a ;
            
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(t1);
            ListaNombre.add(t2);
            ArrayList<Object> temp = new ArrayList<>();
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);
            
            //Procedimiento para el metodo del arbol
            NodoA a1 = new NodoA();
            a1.valor = a;
            a1.valor = a1.valor.replace("\"", "");
            a1.simbolo = a;
            a1.simbolo = a1.simbolo.replace("\"", "");
            a1.simbolo = "\\" + "\"" + a1.simbolo + "\\" + "\"";
            a1.anulable = false;
            a1.nombre = Integer.toString(contador);
            contador++;
            a1.tipo = "Hijo";
            a1.first.add(a1.nombre);
            a1.last.add(a1.nombre);
            

            Siguiente n = new Siguiente();
            n.terminal.add(a1.valor);
            n.hoja = a1.nombre;
            n.simbolo = a1.simbolo;

            ArrayList<Siguiente> sis = new ArrayList<>();
            sis.add(n);
            temp.add(a1);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(a1);
            temp.add(listaNombre);
            RESULT = temp;
          :}

          |especial:a
          {:
            //Procedimiento para el método Thompson
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = t2;
            t1.tran1 = "\""+ "\\" + a + "\"";
            
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(t1);
            ListaNombre.add(t2);
            ArrayList<Object> temp = new ArrayList<>();
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);

            //Procedimiento para el metodo del arbol
            NodoA a1 = new NodoA();
            a1.simbolo = "\\" + a;
            a1.valor = a;
            a1.anulable = false;
            a1.nombre = Integer.toString(contador);
            contador++;
            a1.tipo = "Hijo";
            a1.first.add(a1.nombre);
            a1.last.add(a1.nombre);

            Siguiente n = new Siguiente();
            n.terminal.add(a1.simbolo);
            n.hoja = a1.nombre;
            n.simbolo = a1.simbolo;

            ArrayList<Siguiente> sis = new ArrayList<>();
            sis.add(n);
            temp.add(a1);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(a1);
            temp.add(listaNombre);
            RESULT = temp;
          :}

          |letra:a
          {:
            //Procedimiento para el método Thompson
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = t2;
            t1.tran1 = "\"" + a + "\"";
            
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(t1);
            ListaNombre.add(t2);
            ArrayList<Object> temp = new ArrayList<>();
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);

            //Procedimiento para el metodo del arbol
            NodoA a1 = new NodoA();
            a1.simbolo = a;
            a1.valor = a;
            a1.anulable = false;
            a1.nombre = Integer.toString(contador);
            contador++;
            a1.tipo = "Hijo";
            a1.first.add(a1.nombre);
            a1.last.add(a1.nombre);

            Siguiente n = new Siguiente();
            n.terminal.add(a);
            n.hoja = a1.nombre;
            n.simbolo = a1.simbolo;

            ArrayList<Siguiente> sis = new ArrayList<>();
            sis.add(n);
            
            temp.add(a1);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(a1);
            temp.add(listaNombre);
            RESULT = temp;
          :}
          
          |digito:a
          {:
            //Procedimiento para el método Thompson
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = t2;
            t1.tran1 = "\"" + a + "\"";
            
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(t1);
            ListaNombre.add(t2);
            ArrayList<Object> temp = new ArrayList<>();
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);
            
            //Procedimiento para el metodo del arbol
            NodoA a1 = new NodoA();
            a1.simbolo = a;
            a1.valor = a;
            a1.anulable = false;
            a1.nombre = Integer.toString(contador);
            contador++;
            a1.tipo = "Hijo";
            a1.first.add(a1.nombre);
            a1.last.add(a1.nombre);

            Siguiente n = new Siguiente();
            n.terminal.add(a);
            n.hoja = a1.nombre;
            n.simbolo = a1.simbolo;

            ArrayList<Siguiente> sis = new ArrayList<>();
            sis.add(n);
            
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(a1);
           

            temp.add(a1);   
            temp.add(sis);
            temp.add(listaNombre);
            RESULT = temp;
          :}
          | error
            {:
                 Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
                 a.add(crear);
             :}
;

BINARIO ::= concatenacion:a               {: RESULT = a; :}
            |or:a                         {: RESULT = a; :}
            | error
       {:
            Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
            a.add(crear);
        :}
;

UNARIO  ::= kleene:a                      {: RESULT = a; :}
            |positiva:a                   {: RESULT = a; :}
            |cerouno:a                    {: RESULT = a; :}
            | error
            {:
                 Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
                 a.add(crear);
             :}
;

/*--------------- Manejo de Validaciones -----------------------*/
VALIDAR ::= id:a dospuntos cadena:b puntocoma VALIDAR
            {:
                Automata temp = null;
                int ban = 0;
                for(int i = 0; i < auto.size(); i++){
                    temp = auto.get(i);
                    if(temp.ID.equals(a)){
                        ban = 1;
                        break;
                    }
                }
                
                if(ban == 0){
                    temp = null;
                }
                else{
                   //Crear el objeto validar
                    Validar vnuevo = new Validar(b, temp);
                    val.add(vnuevo);
                }
                

            :}

            |id:a dospuntos cadena:b puntocoma
            {:
                Automata temp = null;
                int ban = 0;
                for(int i = 0; i < auto.size(); i++){
                    temp = auto.get(i);
                    if(temp.ID.equals(a)){
                        ban = 1;
                        break;
                    }
                }
                
                if(ban == 0){
                    temp = null;
                }
                else{
                   //Crear el objeto validar
                    Validar vnuevo = new Validar(b, temp);
                    val.add(vnuevo);
                }
                

            :}
            | error
            {:
                 Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
                 a.add(crear);
             :}
;