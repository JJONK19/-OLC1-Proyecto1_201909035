
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import Aplicacion.Errores;
import Aplicacion.Conjunto;
import Aplicacion.NodoT;
import Aplicacion.NodoA;
import Aplicacion.Siguiente;
import Aplicacion.Thompson;
import Aplicacion.Follows;
import Aplicacion.Arbol;
import Aplicacion.Estado;
import Aplicacion.Transicion;
import Aplicacion.Estados;
import Aplicacion.Validar;
import Aplicacion.Automata;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\005\000\002\003" +
    "\010\000\002\004\004\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\006\010\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\015\005\000\002\015\003\000\002\007\006\000\002" +
    "\011\005\000\002\011\004\000\002\011\005\000\002\011" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\005\007\000\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\015\004\001\002\000\006\005\007\026" +
    "\013\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\017\057\001\002\000\004\004\045\001" +
    "\002\000\010\004\ufffb\005\007\026\013\001\002\000\004" +
    "\014\043\001\002\000\004\025\016\001\002\000\010\004" +
    "\ufffc\005\007\026\013\001\002\000\004\004\ufffe\001\002" +
    "\000\026\006\032\007\024\010\023\011\027\012\017\015" +
    "\031\021\020\022\021\023\030\027\026\001\002\000\026" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\015\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\027\uffdc\001\002\000\030\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\015\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\027\uffe4\001\002\000\030\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\012\uffe1\015\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\027\uffe1\001\002\000\026\006\032" +
    "\007\024\010\023\011\027\012\017\015\031\021\020\022" +
    "\021\023\030\027\026\001\002\000\026\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\015\uffde\021\uffde\022\uffde\023" +
    "\uffde\027\uffde\001\002\000\026\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\015\uffdf\021\uffdf\022\uffdf\023\uffdf\027" +
    "\uffdf\001\002\000\026\006\032\007\024\010\023\011\027" +
    "\012\017\015\031\021\020\022\021\023\030\027\026\001" +
    "\002\000\030\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\015\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\027\uffe3\001" +
    "\002\000\026\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd" +
    "\015\uffdd\021\uffdd\022\uffdd\023\uffdd\027\uffdd\001\002\000" +
    "\030\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\015\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\027\uffe2\001\002\000" +
    "\004\026\036\001\002\000\026\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\015\uffe0\021\uffe0\022\uffe0\023\uffe0\027" +
    "\uffe0\001\002\000\030\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\015\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\027" +
    "\uffe5\001\002\000\004\020\035\001\002\000\010\004\uffe9" +
    "\005\uffe9\026\uffe9\001\002\000\004\014\037\001\002\000" +
    "\030\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\015\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\027\uffe6\001\002\000" +
    "\026\006\032\007\024\010\023\011\027\012\017\015\031" +
    "\021\020\022\021\023\030\027\026\001\002\000\030\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\015\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\027\uffe8\001\002\000\030\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\015\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\027\uffe7\001\002\000\004\002" +
    "\000\001\002\000\004\004\ufffd\001\002\000\004\004\046" +
    "\001\002\000\004\004\047\001\002\000\004\004\050\001" +
    "\002\000\004\026\052\001\002\000\004\014\uffff\001\002" +
    "\000\004\017\053\001\002\000\004\021\054\001\002\000" +
    "\004\020\055\001\002\000\006\014\uffda\026\052\001\002" +
    "\000\004\014\uffdb\001\002\000\004\026\060\001\002\000" +
    "\004\025\061\001\002\000\024\004\065\006\074\007\067" +
    "\010\066\011\070\012\063\022\064\023\071\024\062\001" +
    "\002\000\010\013\ufff2\016\ufff2\020\ufff2\001\002\000\010" +
    "\013\uffec\016\uffec\020\uffec\001\002\000\010\013\111\016" +
    "\ufff4\020\ufff4\001\002\000\010\013\ufff1\016\ufff1\020\ufff1" +
    "\001\002\000\010\013\uffee\016\uffee\020\uffee\001\002\000" +
    "\010\013\uffef\016\uffef\020\uffef\001\002\000\010\013\uffed" +
    "\016\uffed\020\uffed\001\002\000\010\013\107\016\ufff5\020" +
    "\ufff5\001\002\000\004\020\ufff6\001\002\000\010\013\105" +
    "\016\ufff3\020\ufff3\001\002\000\010\013\ufff0\016\ufff0\020" +
    "\ufff0\001\002\000\006\016\100\020\uffea\001\002\000\004" +
    "\020\077\001\002\000\010\004\ufffa\005\ufffa\026\ufffa\001" +
    "\002\000\024\004\065\006\074\007\067\010\066\011\070" +
    "\012\063\022\101\023\102\024\062\001\002\000\006\016" +
    "\ufff4\020\ufff4\001\002\000\006\016\ufff5\020\ufff5\001\002" +
    "\000\004\020\uffeb\001\002\000\006\016\ufff3\020\ufff3\001" +
    "\002\000\020\004\065\006\074\007\067\010\066\011\070" +
    "\012\063\024\062\001\002\000\004\020\ufff7\001\002\000" +
    "\004\023\110\001\002\000\004\020\ufff9\001\002\000\004" +
    "\022\112\001\002\000\004\020\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\002\004\001\001\000\012\003\011\004" +
    "\007\006\013\007\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\043\006\013\007\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\014\006\013\007\010\001\001\000" +
    "\002\001\001\000\012\010\032\011\033\012\024\013\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\010\032\011\041\012\024\013\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\032\011" +
    "\037\012\024\013\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\032\011" +
    "\040\012\024\013\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\075\015\071\016\074\017\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\102\016\074\017\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    
    public ArrayList<Errores> a = new ArrayList<>();        //Almacena los errores que vaya detectando el sistema
    public ArrayList<Conjunto> con = new ArrayList<>();     //Almacena los conjuntos que se vayan generando
    public ArrayList<Thompson> tom = new ArrayList<>();     //Almacena los thompson que lleva generando el sistema
    public ArrayList<Arbol> arb = new ArrayList<>();     //Almacena los arboles que lleva generando el sistema
    public ArrayList<Follows> fow = new ArrayList<>();     //Almacena los followa que lleva generando el sistema
    public ArrayList<String> car = new ArrayList<>();       //Lista de caracteres que va a manejar el conjunto
    public ArrayList<Estado> est = new ArrayList<>();
    public ArrayList<Estado> tab = new ArrayList<>();
    public ArrayList<Estados> trans = new ArrayList<>();    //Tabla de transiciones
    public ArrayList<Automata> auto = new ArrayList<>();    //Lista de automatas
    public ArrayList<Validar> val = new ArrayList<>();    //Lista de validaciones
    public int contador = 1;                                //Contabiliza cuantas hojas lleva el arbol
    public int cestado = 0;

    /*Method that is called when parser can be recovered*/
	public void syntax_error(Symbol s){
        System.out.println("Este es un error de sintaxis: "+s.value + ". Localizado en Fila " + (s.right+1) +" y Columna "+(s.left+1));
        Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
        a.add(crear);
    }

	/*Method that is called when parser can't be recovered*/
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Este es un error de sintaxis: "+s.value + ". Localizado en Fila "+ (s.right+1) +" y Columna "+(s.left+1) + ". No se pudo recuperar.");
        Errores crear = new Errores("Error sintaxix", s.value.toString(), s.right+1, s.left+1);
        a.add(crear);

    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SO ::= apertura CONTENIDO cierre 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CONTENIDO ::= DECLARACION porcentaje porcentaje porcentaje porcentaje VALIDAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION ::= CONJUNTO DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= EXPRESION DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= CONJUNTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONJUNTO ::= conjunto dospuntos id flecha NOT puntocoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                ArrayList<String> ncar = new ArrayList<>();
                for(int i = 0; i < car.size(); i++){
                    ncar.add(car.get(i));
                }
                Conjunto nuevo = new Conjunto(a, ncar, b);
                con.add(nuevo);
                car.clear();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONJUNTO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NOT ::= letra guion letra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            int min = a.toCharArray()[0];
            int max = b.toCharArray()[0];
            if(min > max){
                int ntem = min;
                min = max;
                max = ntem;
            }
            for(int i=min;i<=max;i++){
                car.add(Character.toString(i));
            }
            String temp = "[" + a + "-" + b +"]";            
            RESULT = temp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NOT ::= digito guion digito 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            int min = a.toCharArray()[0];
            int max = b.toCharArray()[0];
            if(min > max){
                int ntem = min;
                min = max;
                max = ntem;
            }
            for(int i=min;i<=max;i++){
                car.add(Character.toString(i));
            }
            String temp = "[" + a + "-" + b +"]";            
            RESULT = temp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NOT ::= SYM guion SYM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            int min = a.toCharArray()[0];
            int max = b.toCharArray()[0];
            if(min > max){
                int ntem = min;
                min = max;
                max = ntem;
            }
            for(int i=min;i<=max;i++){
                car.add(Character.toString(i));
            }
            String temp = "[" + a + "-" + b +"]";            
            RESULT = temp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NOT ::= GRUPO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            String temp = "(" + a + ")";   
            Collections.reverse(car);
            RESULT = temp;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VAL ::= letra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VAL ::= digito 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VAL ::= SYM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SYM ::= simbolo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SYM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SYM ::= porcentaje 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SYM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SYM ::= concatenacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SYM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SYM ::= or 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SYM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SYM ::= kleene 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SYM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SYM ::= positiva 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SYM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SYM ::= cerouno 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SYM",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GRUPO ::= VAL coma GRUPO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            String not = a + "|" + b;
            car.add(a);
            RESULT = not;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRUPO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GRUPO ::= VAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            car.add(a);
            RESULT = a;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRUPO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= id flecha E puntocoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Object> b = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            //Procedimiento del metodo Thompson
            NodoT Cabecera1 = (NodoT)b.get(0);
            NodoT Salida1 = (NodoT)b.get(1);
            ArrayList<NodoT> a1 = (ArrayList<NodoT>)b.get(2);
            Thompson nuevo = new Thompson(a, a1, Cabecera1);
            tom.add(nuevo);
            
            //Procedimiento del metodo del arbol
            NodoA hijo1 = (NodoA)b.get(3);
            ArrayList<Siguiente> s1 = (ArrayList<Siguiente>)b.get(4);
            ArrayList<NodoA> n1 = (ArrayList<NodoA>)b.get(5);
            
                //Creacion del nodo aceptacion
            NodoA a11 = new NodoA();
            a11.simbolo = "$";
            a11.valor = "$";
            a11.anulable = false;
            a11.nombre = Integer.toString(contador);
            contador++;
            a11.tipo = "Hijo";
            a11.first.add(a11.nombre);
            a11.last.add(a11.nombre);

            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(a11);
            
            NodoA hijo2 = a11;
            ArrayList<Siguiente> s2 = new ArrayList<>();
            ArrayList<NodoA> n2 = listaNombre;
            
                //Nodo Binario
            NodoA bin = new NodoA();
            bin.valor = ".";
            bin.simbolo = ".";
            if(hijo1.anulable == true && hijo2.anulable == true){
                bin.anulable = true;
            }else{
                bin.anulable = false; 
            }
            bin.tipo = "Padre";
            bin.hijo1 = hijo1;
            bin.hijo2 = hijo2;
            
            //Calculo de los first
            if(hijo1.anulable == true){
                for(int i = 0; i < hijo1.first.size(); i++){
                    bin.first.add(hijo1.first.get(i));
                }
                
                for(int i = 0; i < hijo2.first.size(); i++){
                    bin.first.add(hijo2.first.get(i));
                }
            }else{
                for(int i = 0; i < hijo1.first.size(); i++){
                    bin.first.add(hijo1.first.get(i));
                }
            }

            //Calculo de last
            if(hijo2.anulable == true){
                for(int i = 0; i < hijo1.last.size(); i++){
                    bin.last.add(hijo1.last.get(i));
                }
                
                for(int i = 0; i < hijo2.last.size(); i++){
                    bin.last.add(hijo2.last.get(i));
                }
            }else{
                for(int i = 0; i < hijo2.last.size(); i++){
                    bin.last.add(hijo2.last.get(i));
                }
            }
            
            //Mezcla de Siguientes
            ArrayList<Siguiente> sis = new ArrayList<>();
            for(int i = 0; i < s1.size(); i++){
                sis.add(s1.get(i));
            }
            for(int i = 0; i < s2.size(); i++){
                sis.add(s2.get(i));
            }
            
            //Calculo de Siguientes
            ArrayList<String> ast = hijo2.first;
            for(int i = 0; i < hijo1.last.size(); i++){
                String st = hijo1.last.get(i);
                for(int j = 0; j < sis.size(); j++){
                    Siguiente ste = sis.get(j);
                    if(ste.hoja == st){
                        if(ast.size() == 0){
                            for(int k = 0; k < ast.size(); k++){
                                ste.LS.add(ast.get(k));
                            }
                        }else{
                            for(int k = 0; k < ast.size(); k++){
                                if(Arrays.asList(ste.LS).contains(ast.get(k)) == false){
                                ste.LS.add(ast.get(k));
                                }
                            }
                        }
                        break;
                    }
                }
            }
            ArrayList<NodoA>listanombre = new ArrayList<>();
            listanombre.add(bin);
            for(int i = 0; i < n1.size(); i++){
                listanombre.add(n1.get(i));
            }
            for(int i = 0; i < n2.size(); i++){
                listanombre.add(n2.get(i));
            }
            
            NodoA cabecera = bin;
            String nomo = hijo2.nombre;
            contador = 1;

            //Crear objeto arbol
            Arbol nuevoa = new Arbol(a, listanombre, cabecera);
            arb.add(nuevoa);
            
            //Crear objeto tabla siguientes
            Follows nuevof = new Follows(a, sis);
            fow.add(nuevof);
            
            //Manejo de la tabla de transiciones
            Estado inicial = new Estado();
            inicial.nombre = "S" + Integer.toString(cestado);
            cestado++;
            inicial.sig = cabecera.first;
            
            est.add(inicial);
            while(!est.isEmpty()){
                Estado etemp = est.get(0);
                ArrayList<Transicion> ttemp = new ArrayList<>();
                ArrayList<String> stemp = etemp.sig;
                //1.Recorrer stemp
                for(int i = 0; i < stemp.size(); i++){
                    String st = stemp.get(i);
                    for(int j = 0; j < sis.size(); j++){
                        Siguiente ste = sis.get(j);
                        if(ste.hoja == st){
                            Transicion tt = new Transicion();
                            tt.car = ste.terminal;
                            tt.sig = ste.LS;
                            ttemp.add(tt);
                        }
                    }
                    if(st == nomo){
                        etemp.aceptar = true;
                    }
                }
                
                //2.Optimización
                for(int i = 0 ; i < ttemp.size(); i++){
                    Transicion tte = ttemp.get(i);
                    for(int j = 0 ; j < ttemp.size(); j++){
                        if(i != j){
                            Transicion ttej = ttemp.get(j);
                            if(!ttej.rev){
                                if(tte.car.equals(ttej.car)){
                                    for(int k = 0; k < ttej.car.size(); k++){
                                        tte.car.add(ttej.car.get(k));
                                    }
                                    ttej.borrar = true;
                                }
                                tte.rev = true;
                            }
                        }
                       
                    }
                    
                }
                
                for(int i = 0 ; i < ttemp.size(); i++){
                    Transicion tte = ttemp.get(i);
                    if(tte.borrar){
                        tte = null;
                        ttemp.remove(i);
                    }
                }
                   
                //Nombres
                for(int i = 0 ; i < ttemp.size(); i++){
                    int ban = 0;
                    int bant = 0;
                    Transicion tte = ttemp.get(i);
                    //Buscar en la cola de estados
                    for(int j = 0; j < est.size(); j++){
                        ArrayList<String> lse = est.get(j).sig;
                        if(lse.equals(tte.sig)){
                            tte.next = est.get(j);
                            ban = 1;
                            break;
                        }
                    }
                    
                    //Buscar en los estados finalizados
                    if(ban == 0){
                        if(tab.isEmpty()){
                            //Crear nuevo estado
                            Estado net = new Estado();
                            net.nombre = "S" + Integer.toString(cestado);
                            cestado++;
                            net.sig = tte.sig;
                            tte.next = net;
                            est.add(net);
                            
                        }else{
                            for(int j = 0; j < tab.size(); j++){
                                ArrayList<String> lse = tab.get(j).sig;
                                if(lse.equals(tte.sig)){
                                    tte.next = tab.get(j);
                                    bant = 1;
                                    break;
                                }
                            }
                            
                            if(bant == 0){
                                //Crear nuevo estado
                                Estado net = new Estado();
                                net.nombre = "S" + Integer.toString(cestado);
                                cestado++;
                                net.sig = tte.sig;
                                tte.next = net;
                                est.add(net);
                            }
                        }
                    }
                    
                }
                
                //Paso Final
                etemp.tr = ttemp;
                tab.add(etemp);
                est.remove(0);
            }
            
            cestado = 0;
            Estados ntrans = new Estados(a,tab);
            trans.add(ntrans);

             //Manejo de Automatas
            Automata nauto = new Automata(a,tab, inicial);
            auto.add(nauto);

            est = new ArrayList<>();
            tab = new ArrayList<>();

           
         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= BINARIO E E 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Object> b = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Object> c = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        if(a.equals(".")){                                           //Concatenación
            ArrayList<Object> temp = new ArrayList<>();
        //Procedimiento para el método Thompson
            NodoT Cabecera1 = (NodoT)b.get(0);
            NodoT Salida1 = (NodoT)b.get(1);
            ArrayList<NodoT> a1 = (ArrayList<NodoT>)b.get(2);

            NodoT Cabecera2 = (NodoT)c.get(0);
            NodoT Salida2 = (NodoT)c.get(1);
            ArrayList<NodoT> a2 = (ArrayList<NodoT>)c.get(2);
            
            //Procedimiento
            //1.Convertir salida en nueva entrada
            if(Cabecera2.next1 != null){
                Salida1.next1 = Cabecera2.next1;
                Salida1.tran1 = Cabecera2.tran1;
            }
            
            if(Cabecera2.next2 != null){
                Salida1.next2 = Cabecera2.next2;
                Salida1.tran2 = Cabecera2.tran2;
            }
            
            //2. Borrar nodo reemplazado
            a2.remove(0);
            Cabecera2 = null;
            
            //3. Preparar Info
            NodoT Cabecera = Cabecera1;
            NodoT Salida = Salida2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            for(int i = 0; i < a1.size(); i++){
                ListaNombre.add(a1.get(i));
            }
            for(int i = 0; i < a2.size(); i++){
                ListaNombre.add(a2.get(i));
            }
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);

            //Procedimiento para metodo del arbol
            NodoA hijo1 = (NodoA)b.get(3);
            NodoA hijo2 = (NodoA)c.get(3);
            ArrayList<Siguiente> s1 = (ArrayList<Siguiente>)b.get(4);
            ArrayList<Siguiente> s2 = (ArrayList<Siguiente>)c.get(4);
            ArrayList<NodoA> n1 = (ArrayList<NodoA>)b.get(5);
            ArrayList<NodoA> n2 = (ArrayList<NodoA>)c.get(5);
                //Nodo Binario
            NodoA bin = new NodoA();
            bin.simbolo = ".";
            bin.valor = ".";
            if(hijo1.anulable == true && hijo2.anulable == true){
                bin.anulable = true;
            }else{
                bin.anulable = false; 
            }
            bin.tipo = "Padre";
            bin.hijo1 = hijo1;
            bin.hijo2 = hijo2;
            
            //Calculo de los first
            if(hijo1.anulable == true){
                for(int i = 0; i < hijo1.first.size(); i++){
                    bin.first.add(hijo1.first.get(i));
                }
                
                for(int i = 0; i < hijo2.first.size(); i++){
                    bin.first.add(hijo2.first.get(i));
                }
            }else{
                for(int i = 0; i < hijo1.first.size(); i++){
                    bin.first.add(hijo1.first.get(i));
                }
            }

            //Calculo de last
            if(hijo2.anulable == true){
                for(int i = 0; i < hijo1.last.size(); i++){
                    bin.last.add(hijo1.last.get(i));
                }
                
                for(int i = 0; i < hijo2.last.size(); i++){
                    bin.last.add(hijo2.last.get(i));
                }
            }else{
                for(int i = 0; i < hijo2.last.size(); i++){
                    bin.last.add(hijo2.last.get(i));
                }
            }
            
            //Mezcla de Siguientes
            ArrayList<Siguiente> sis = new ArrayList<>();
            for(int i = 0; i < s1.size(); i++){
                sis.add(s1.get(i));
            }
            for(int i = 0; i < s2.size(); i++){
                sis.add(s2.get(i));
            }
            
            //Calculo de Siguientes
            ArrayList<String> ast = hijo2.first;
            for(int i = 0; i < hijo1.last.size(); i++){
                String st = hijo1.last.get(i);
                for(int j = 0; j < sis.size(); j++){
                    Siguiente ste = sis.get(j);
                    if(ste.hoja == st){
                        if(ste.LS.size() == 0){
                            for(int k = 0; k < ast.size(); k++){
                                ste.LS.add(ast.get(k));
                            }
                        }else{
                            for(int k = 0; k < ast.size(); k++){
                                if(!ste.LS.contains(ast.get(k))){
                                    ste.LS.add(ast.get(k));
                                }
                            }
                        }
                        break;
                    }
                }
            }
            temp.add(bin);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(bin);
            for(int i = 0; i < n1.size(); i++){
                listaNombre.add(n1.get(i));
            }
            for(int i = 0; i < n2.size(); i++){
                listaNombre.add(n2.get(i));
            }
            temp.add(listaNombre);
            RESULT = temp;
            
        }else{                                                      //Or
            ArrayList<Object> temp = new ArrayList<>();
        //Procedimiento para el método Thompson
            NodoT Cabecera1 = (NodoT)b.get(0);
            NodoT Salida1 = (NodoT)b.get(1);
            ArrayList<NodoT> a1 = (ArrayList<NodoT>)b.get(2);

            NodoT Cabecera2 = (NodoT)c.get(0);
            NodoT Salida2 = (NodoT)c.get(1);
            ArrayList<NodoT> a2 = (ArrayList<NodoT>)c.get(2);
            
            //Procedimiento
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = Cabecera1;
            t1.tran1 = "\"" + "*E*" + "\"";
            t1.next2 = Cabecera2;
            t1.tran2 = "\"" + "*E*" + "\"";

            Salida1.next1 = t2;
            Salida1.tran1 = "\"" + "*E*" + "\"";
            Salida2.next2 = t2;
            Salida2.tran2 = "\"" + "*E*" + "\"";
            
            //Preparar Info
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(Cabecera);
            for(int i = 0; i < a1.size(); i++){
                ListaNombre.add(a1.get(i));
            }
            for(int i = 0; i < a2.size(); i++){
                ListaNombre.add(a2.get(i));
            }
            ListaNombre.add(Salida);
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);

            //Procedimiento para metodo del arbol
            NodoA hijo1 = (NodoA)b.get(3);
            NodoA hijo2 = (NodoA)c.get(3);
            ArrayList<Siguiente> s1 = (ArrayList<Siguiente>)b.get(4);
            ArrayList<Siguiente> s2 = (ArrayList<Siguiente>)c.get(4);
            ArrayList<NodoA> n1 = (ArrayList<NodoA>)b.get(5);
            ArrayList<NodoA> n2 = (ArrayList<NodoA>)c.get(5);

                //Nodo Binario
            NodoA bin = new NodoA();
            bin.simbolo = "\\|";
            bin.valor = "|";
            if(hijo1.anulable == true || hijo2.anulable == true){
                bin.anulable = true;
            }else{
                bin.anulable = false; 
            }
            bin.tipo = "Padre";
            bin.hijo1 = hijo1;
            bin.hijo2 = hijo2;
            
            //Calculo de los first
            for(int i = 0; i < hijo1.first.size(); i++){
                bin.first.add(hijo1.first.get(i));
            }
                
            for(int i = 0; i < hijo2.first.size(); i++){
                bin.first.add(hijo2.first.get(i));
            }
            

            //Calculo de last
            for(int i = 0; i < hijo1.last.size(); i++){
                bin.last.add(hijo1.last.get(i));
            }
                
            for(int i = 0; i < hijo2.last.size(); i++){
                bin.last.add(hijo2.last.get(i));
            }
            
            //Mezcla de Siguientes
            ArrayList<Siguiente> sis = new ArrayList<>();
            for(int i = 0; i < s1.size(); i++){
                sis.add(s1.get(i));
            }
            for(int i = 0; i < s2.size(); i++){
                sis.add(s2.get(i));
            }
            temp.add(bin);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(bin);
            for(int i = 0; i < n1.size(); i++){
                listaNombre.add(n1.get(i));
            }
            for(int i = 0; i < n2.size(); i++){
                listaNombre.add(n2.get(i));
            }
            temp.add(listaNombre);
            RESULT = temp;
        }
      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= UNARIO E 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Object> b = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        if(a.equals("*")){                                           //Kleene
            ArrayList<Object> temp = new ArrayList<>();
        //Procedimiento para el método Thompson
            NodoT Cabecera1 = (NodoT)b.get(0);
            NodoT Salida1 = (NodoT)b.get(1);
            ArrayList<NodoT> a1 = (ArrayList<NodoT>)b.get(2);

            //Procedimiento
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = Cabecera1;
            t1.tran1 = "\"" + "*E*" + "\"";
            t1.next2 = t2;
            t1.tran2 = "\"" + "*E*" + "\"";
            t1.constraint = true;

            Salida1.next1 = t2;
            Salida1.tran1 = "\"" + "*E*" + "\"";
            Salida1.next2 = Cabecera1;
            Salida1.tran2 = "\"" + "*E*" + "\"";
            
            //Preparar Info
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(Cabecera);
            for(int i = 0; i < a1.size(); i++){
                ListaNombre.add(a1.get(i));
            }
            ListaNombre.add(Salida);
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);

            //Procedimiento para metodo del arbol
            NodoA hijo1 = (NodoA)b.get(3);
            ArrayList<Siguiente> s1 = (ArrayList<Siguiente>)b.get(4);
            ArrayList<NodoA> n1 = (ArrayList<NodoA>)b.get(5);
                //Nodo Unario
            NodoA bin = new NodoA();
            bin.valor = "*";
            bin.simbolo = "*";
            bin.anulable = true;
            bin.tipo = "Padre";
            bin.hijo1 = hijo1;
            
            //Calculo de los first
            for(int i = 0; i < hijo1.first.size(); i++){
                bin.first.add(hijo1.first.get(i));
            }
            

            //Calculo de last
            for(int i = 0; i < hijo1.last.size(); i++){
                bin.last.add(hijo1.last.get(i));
            }
            
            //Mezcla de Siguientes
            ArrayList<Siguiente> sis = new ArrayList<>();
            for(int i = 0; i < s1.size(); i++){
                sis.add(s1.get(i));
            }
            
            //Calculo de Siguientes
            ArrayList<String> ast = hijo1.first;
            for(int i = 0; i < hijo1.last.size(); i++){
                String st = hijo1.last.get(i);
                for(int j = 0; j < sis.size(); j++){
                    Siguiente ste = sis.get(j);
                    if(ste.hoja == st){
                        if(ste.LS.size() == 0){
                            for(int k = 0; k < ast.size(); k++){
                                ste.LS.add(ast.get(k));
                            }
                        }else{
                            for(int k = 0; k < ast.size(); k++){
                                if(!ste.LS.contains(ast.get(k))){
                                    ste.LS.add(ast.get(k));
                                }
                            }
                        }
                        break;
                    }
                }
            }
            temp.add(bin);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(bin);
            for(int i = 0; i < n1.size(); i++){
               listaNombre.add(n1.get(i));
            }
            temp.add(listaNombre);
            RESULT = temp;
            
        }else{
            if(a.equals("+")){                                           //Positiva
                ArrayList<Object> temp = new ArrayList<>();
            //Procedimiento para el método Thompson
                NodoT Cabecera1 = (NodoT)b.get(0);
                NodoT Salida1 = (NodoT)b.get(1);
                ArrayList<NodoT> a1 = (ArrayList<NodoT>)b.get(2);

                //Procedimiento
                //1. Clonar entrada
                ArrayList<String> ctran = new ArrayList<>();
                ArrayList<NodoT> clon = new ArrayList<>();

                for(int i = 0; i < a1.size(); i++){
                    //Renombrar nodos
                    NodoT rlis = a1.get(i);
                    rlis.Nombre = Character.toString(41 + i);
                }

                for(int i = 0; i < a1.size(); i++){
                    //Creacion de Nodos
                    NodoT tclon = new NodoT();
                    tclon.Nombre = Character.toString(41 + i); 
                    clon.add(tclon);
                    
                    //Adicion de Trancisiones a la lista de strings
                    NodoT rlis = a1.get(i);
                    
                    if(rlis.next1 != null){
                        ctran.add(Character.toString(41 + i));
                        ctran.add(rlis.next1.Nombre);
                        ctran.add(rlis.tran1);
                    }

                    if(rlis.next2 != null){
                        ctran.add(Character.toString(41 + i));
                        ctran.add(rlis.next2.Nombre);
                        ctran.add(rlis.tran2);
                    }
                }
                
                for(int i = 0; i < (ctran.size()/3); i++){
                    String A = ctran.get(i*3);
                    String B = ctran.get((i*3)+1);
                    String C = ctran.get((i*3)+2);
                    
                    NodoT A1 = new NodoT();
                    for(int j = 0; j < clon.size(); j++){
                        A1 = clon.get(j);
                        if(A1.Nombre.equals(A)){
                            break;
                        }
                    }
                    
                    NodoT B1 = new NodoT();
                    for(int j = 0; j < clon.size(); j++){
                        B1 = clon.get(j);
                        if(B1.Nombre.equals(B)){
                            break;
                        }
                    }
                    
                    if(A1.next1 == null){
                        A1.next1 = B1;
                        A1.tran1 = C;
                    }else{
                        A1.next2 = B1;
                        A1.tran2 = C;
                    }
                }
                
                NodoT Cabecera2 = clon.get(0);
                NodoT Salida2 = clon.get(clon.size()-1);
                ArrayList<NodoT> a2 = clon;
                
                //2.Kleene
                NodoT t1 = new NodoT();
                NodoT t2 = new NodoT();
                t1.next1 = Cabecera2;
                t1.tran1 = "\"" + "*E*" + "\"";
                t1.next2 = t2;
                t1.tran2 = "\"" + "*E*" + "\"";

                Salida2.next1 = t2;
                Salida2.tran1 = "\"" + "*E*" + "\"";
                Salida2.next2 = Cabecera2;
                Salida2.tran2 = "\"" + "*E*" + "\"";
                
                NodoT CabeceraClon = t1;
                NodoT SalidaClon = t2;
                ArrayList<NodoT>ListaNombreClon = new ArrayList<>();
                ListaNombreClon.add(CabeceraClon);
                for(int i = 0; i < clon.size(); i++){
                    ListaNombreClon.add(clon.get(i));
                }
                ListaNombreClon.add(SalidaClon);
                
                //3. Concatenación
                if(CabeceraClon.next1 != null){
                    Salida1.next1 = CabeceraClon.next1;
                    Salida1.tran1 = CabeceraClon.tran1;
                }

                if(CabeceraClon.next2 != null){
                    Salida1.next2 = CabeceraClon.next2;
                    Salida1.tran2 = CabeceraClon.tran2;
                }

                //Borrar nodo reemplazado
                ListaNombreClon.remove(0);
                CabeceraClon = null;


                //3. Preparar Info
                NodoT Cabecera = Cabecera1;
                NodoT Salida = SalidaClon;
                ArrayList<NodoT>ListaNombre = new ArrayList<>();
                for(int i = 0; i < a1.size(); i++){
                    ListaNombre.add(a1.get(i));
                }
                for(int i = 0; i < ListaNombreClon.size(); i++){
                    ListaNombre.add(ListaNombreClon.get(i));
                }
                temp.add(Cabecera);
                temp.add(Salida);
                temp.add(ListaNombre);

                //Procedimiento para metodo del arbol
                NodoA hijo1 = (NodoA)b.get(3);
                ArrayList<Siguiente> s1 = (ArrayList<Siguiente>)b.get(4);
                ArrayList<NodoA> n1 = (ArrayList<NodoA>)b.get(5);
                
                    //Nodo Unario
                NodoA bin = new NodoA();
                bin.simbolo = "+";
                bin.valor = "+";
                bin.anulable = hijo1.anulable;
                bin.tipo = "Padre";
                bin.hijo1 = hijo1;
                //Calculo de los first
                for(int i = 0; i < hijo1.first.size(); i++){
                    bin.first.add(hijo1.first.get(i));
                }


                //Calculo de last
                for(int i = 0; i < hijo1.last.size(); i++){
                    bin.last.add(hijo1.last.get(i));
                }

                //Mezcla de Siguientes
                ArrayList<Siguiente> sis = new ArrayList<>();
                for(int i = 0; i < s1.size(); i++){
                    sis.add(s1.get(i));
                }

                //Calculo de Siguientes
                ArrayList<String> ast = hijo1.first;
                for(int i = 0; i < hijo1.last.size(); i++){
                String st = hijo1.last.get(i);
                for(int j = 0; j < sis.size(); j++){
                    Siguiente ste = sis.get(j);
                    if(ste.hoja == st){
                        if(ste.LS.size() == 0){
                            for(int k = 0; k < ast.size(); k++){
                                ste.LS.add(ast.get(k));
                            }
                        }else{
                            for(int k = 0; k < ast.size(); k++){
                                if(!ste.LS.contains(ast.get(k))){
                                    ste.LS.add(ast.get(k));
                                }
                            }
                        }
                        break;
                    }
                }
            }
                temp.add(bin);   
                temp.add(sis);
                ArrayList<NodoA>listaNombre = new ArrayList<>();
                listaNombre.add(bin);
                for(int i = 0; i < n1.size(); i++){
                    listaNombre.add(n1.get(i));
                }
                temp.add(listaNombre);
                RESULT = temp;
            
            }else{                                         //Uno o Cero
                ArrayList<Object> temp = new ArrayList<>();
            //Procedimiento para el método Thompson
                NodoT Cabecera1 = (NodoT)b.get(0);
                NodoT Salida1 = (NodoT)b.get(1);
                ArrayList<NodoT> a1 = (ArrayList<NodoT>)b.get(2);

                //Procedimiento
                NodoT t1 = new NodoT();
                NodoT t2 = new NodoT();
                NodoT te = new NodoT();
                NodoT ts = new NodoT();
                te.next1 = Cabecera1;
                te.tran1 = "\"" + "*E*" + "\"";
                te.next2 = t1;
                te.tran2 = "\"" + "*E*" + "\"";

                t1.next1 = t2;
                t1.tran2 = "\"" + "*E*" + "\"";
                t2.next1 = ts;
                t2.tran1 = "\"" + "*E*" + "\"";
                Salida1.next2 = ts;
                Salida1.tran2 = "\"" + "*E*" + "\"";

                //Preparar Info
                NodoT Cabecera = te;
                NodoT Salida = ts;
                ArrayList<NodoT>ListaNombre = new ArrayList<>();
                ListaNombre.add(Cabecera);
                for(int i = 0; i < a1.size(); i++){
                    ListaNombre.add(a1.get(i));
                }
                ListaNombre.add(t1);
                ListaNombre.add(t2);
                ListaNombre.add(Salida);
                temp.add(Cabecera);
                temp.add(Salida);
                temp.add(ListaNombre);

                //Procedimiento para metodo del arbol
                NodoA hijo1 = (NodoA)b.get(3);
                ArrayList<Siguiente> s1 = (ArrayList<Siguiente>)b.get(4);
                ArrayList<NodoA> n1 = (ArrayList<NodoA>)b.get(5);
                    //Nodo Unario
                NodoA bin = new NodoA();
                bin.valor = "?";
                bin.simbolo = "?";
                bin.anulable = true;
                bin.tipo = "Padre";
                bin.hijo1 = hijo1;
                //Calculo de los first
                for(int i = 0; i < hijo1.first.size(); i++){
                    bin.first.add(hijo1.first.get(i));
                }


                //Calculo de last
                for(int i = 0; i < hijo1.last.size(); i++){
                    bin.last.add(hijo1.last.get(i));
                }

                //Mezcla de Siguientes
                ArrayList<Siguiente> sis = new ArrayList<>();
                for(int i = 0; i < s1.size(); i++){
                    sis.add(s1.get(i));
                }
                temp.add(bin);   
                temp.add(sis);
                ArrayList<NodoA>listaNombre = new ArrayList<>();
                listaNombre.add(bin);
                for(int i = 0; i < n1.size(); i++){
                    listaNombre.add(n1.get(i));
                }
                temp.add(listaNombre);
                RESULT = temp;
            }
        }
      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= apertura id cierre 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        Conjunto ct = null;
        int ban = 0;
        for(int i = 0; i < con.size(); i++){
            ct = con.get(i);
            if(ct.ID.equals(a)){
                ban = 1;
                break;
            }
        }
        
        if(ban == 1){
            //Procedimiento para el método Thompson
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = t2;
            t1.tran1 = "\"" +ct.ID + "\"";
            
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(t1);
            ListaNombre.add(t2);
            ArrayList<Object> temp = new ArrayList<>();
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);
            
            //Procedimiento para el metodo del arbol
            NodoA a1 = new NodoA();
            a1.simbolo = ct.ID;
            a1.simbolo = a1.simbolo.replace("{", "");
            a1.simbolo = a1.simbolo.replace("}", "");

            a1.valor = ct.notacion;
            a1.anulable = false;
            a1.nombre = Integer.toString(contador);
            contador++;
            a1.tipo = "Hijo";
            a1.first.add(a1.nombre);
            a1.last.add(a1.nombre);

            Siguiente n = new Siguiente();
            n.terminal = ct.conjunto;;
            n.hoja = a1.nombre;
            n.simbolo = ct.ID;
            n.simbolo = n.simbolo.replace("{", "");
            n.simbolo = n.simbolo.replace("}", "");

            ArrayList<Siguiente> sis = new ArrayList<>();
            sis.add(n);
            temp.add(a1);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(a1);
            temp.add(listaNombre);
            RESULT = temp;
        }else{
            //Procedimiento para el método Thompson
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = t2;
            t1.tran1 = "\""+ "Error" + "\"";
            
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(t1);
            ListaNombre.add(t2);
            ArrayList<Object> temp = new ArrayList<>();
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);
            
            //Procedimiento para el metodo del arbol
            NodoA a1 = new NodoA();
            a1.simbolo = "\""+ "Error" + "\"";
            a1.valor = "Error";
            a1.anulable = false;
            a1.nombre = Integer.toString(contador);
            contador++;
            a1.tipo = "Hijo";
            a1.first.add(a1.nombre);
            a1.last.add(a1.nombre);

            Siguiente n = new Siguiente();
            n.terminal.add(a);
            n.hoja = a1.nombre;

            ArrayList<Siguiente> sis = new ArrayList<>();
            sis.add(n);
            temp.add(a1);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(a1);
            temp.add(listaNombre);
            RESULT = temp;
        }
      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= OTROS 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OTROS ::= cadena 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            //Procedimiento para el método Thompson
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = t2;
            t1.tran1 =  a ;
            
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(t1);
            ListaNombre.add(t2);
            ArrayList<Object> temp = new ArrayList<>();
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);
            
            //Procedimiento para el metodo del arbol
            NodoA a1 = new NodoA();
            a1.valor = a;
            a1.valor = a1.valor.replace("\"", "");
            a1.simbolo = a;
            a1.simbolo = a1.simbolo.replace("\"", "");
            a1.simbolo = "\\" + "\"" + a1.simbolo + "\\" + "\"";
            a1.anulable = false;
            a1.nombre = Integer.toString(contador);
            contador++;
            a1.tipo = "Hijo";
            a1.first.add(a1.nombre);
            a1.last.add(a1.nombre);
            

            Siguiente n = new Siguiente();
            n.terminal.add(a1.valor);
            n.hoja = a1.nombre;
            n.simbolo = a1.simbolo;

            ArrayList<Siguiente> sis = new ArrayList<>();
            sis.add(n);
            temp.add(a1);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(a1);
            temp.add(listaNombre);
            RESULT = temp;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTROS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OTROS ::= especial 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            //Procedimiento para el método Thompson
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = t2;
            t1.tran1 = "\""+ "\\" + a + "\"";
            
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(t1);
            ListaNombre.add(t2);
            ArrayList<Object> temp = new ArrayList<>();
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);

            //Procedimiento para el metodo del arbol
            NodoA a1 = new NodoA();
            a1.simbolo = "\\" + a;
            a1.valor = a;
            a1.anulable = false;
            a1.nombre = Integer.toString(contador);
            contador++;
            a1.tipo = "Hijo";
            a1.first.add(a1.nombre);
            a1.last.add(a1.nombre);

            Siguiente n = new Siguiente();
            n.terminal.add(a1.simbolo);
            n.hoja = a1.nombre;
            n.simbolo = a1.simbolo;

            ArrayList<Siguiente> sis = new ArrayList<>();
            sis.add(n);
            temp.add(a1);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(a1);
            temp.add(listaNombre);
            RESULT = temp;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTROS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OTROS ::= letra 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            //Procedimiento para el método Thompson
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = t2;
            t1.tran1 = "\"" + a + "\"";
            
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(t1);
            ListaNombre.add(t2);
            ArrayList<Object> temp = new ArrayList<>();
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);

            //Procedimiento para el metodo del arbol
            NodoA a1 = new NodoA();
            a1.simbolo = a;
            a1.valor = a;
            a1.anulable = false;
            a1.nombre = Integer.toString(contador);
            contador++;
            a1.tipo = "Hijo";
            a1.first.add(a1.nombre);
            a1.last.add(a1.nombre);

            Siguiente n = new Siguiente();
            n.terminal.add(a);
            n.hoja = a1.nombre;
            n.simbolo = a1.simbolo;

            ArrayList<Siguiente> sis = new ArrayList<>();
            sis.add(n);
            
            temp.add(a1);   
            temp.add(sis);
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(a1);
            temp.add(listaNombre);
            RESULT = temp;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTROS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OTROS ::= digito 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            //Procedimiento para el método Thompson
            NodoT t1 = new NodoT();
            NodoT t2 = new NodoT();
            t1.next1 = t2;
            t1.tran1 = "\"" + a + "\"";
            
            NodoT Cabecera = t1;
            NodoT Salida = t2;
            ArrayList<NodoT>ListaNombre = new ArrayList<>();
            ListaNombre.add(t1);
            ListaNombre.add(t2);
            ArrayList<Object> temp = new ArrayList<>();
            temp.add(Cabecera);
            temp.add(Salida);
            temp.add(ListaNombre);
            
            //Procedimiento para el metodo del arbol
            NodoA a1 = new NodoA();
            a1.simbolo = a;
            a1.valor = a;
            a1.anulable = false;
            a1.nombre = Integer.toString(contador);
            contador++;
            a1.tipo = "Hijo";
            a1.first.add(a1.nombre);
            a1.last.add(a1.nombre);

            Siguiente n = new Siguiente();
            n.terminal.add(a);
            n.hoja = a1.nombre;
            n.simbolo = a1.simbolo;

            ArrayList<Siguiente> sis = new ArrayList<>();
            sis.add(n);
            
            ArrayList<NodoA>listaNombre = new ArrayList<>();
            listaNombre.add(a1);
           

            temp.add(a1);   
            temp.add(sis);
            temp.add(listaNombre);
            RESULT = temp;
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OTROS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BINARIO ::= concatenacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BINARIO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BINARIO ::= or 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BINARIO",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // UNARIO ::= kleene 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // UNARIO ::= positiva 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // UNARIO ::= cerouno 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALIDAR ::= id dospuntos cadena puntocoma VALIDAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                Automata temp = null;
                int ban = 0;
                for(int i = 0; i < auto.size(); i++){
                    temp = auto.get(i);
                    if(temp.ID.equals(a)){
                        ban = 1;
                        break;
                    }
                }
                
                if(ban == 0){
                    temp = null;
                }
                else{
                   //Crear el objeto validar
                    Validar vnuevo = new Validar(b, temp);
                    val.add(vnuevo);
                }
                

            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALIDAR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALIDAR ::= id dospuntos cadena puntocoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Automata temp = null;
                int ban = 0;
                for(int i = 0; i < auto.size(); i++){
                    temp = auto.get(i);
                    if(temp.ID.equals(a)){
                        ban = 1;
                        break;
                    }
                }
                
                if(ban == 0){
                    temp = null;
                }
                else{
                   //Crear el objeto validar
                    Validar vnuevo = new Validar(b, temp);
                    val.add(vnuevo);
                }
                

            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALIDAR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
